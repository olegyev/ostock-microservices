# https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.property-placeholders
# Property placeholders are replaced in Docker Compose file with the env variables

example.property=I AM THE DEFAULT
server.port=8080
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=true
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

eureka.server.port=8070
eureka.instance.hostname=${EUREKA_INSTANCE_HOSTNAME:localhost}
# Registers the IP address of the service rather than the server name.
# By default, Eureka registers the services that contact it by hostname (DNS).
# This works well in a server-based environment, where a service is assigned a DNS-backed hostname.
# However, in a container-based deployment (for example, Docker), containers are
# started with randomly generated hostnames and no DNS entries for the containers.
eureka.instance.preferIpAddress=true
# Registers the service with Eureka
eureka.client.registerWithEureka=true
# Pulls down a local copy of the registry
# Setting this attribute to true caches the registry locally instead of calling the
# Eureka service with each lookup. Every 30 seconds, the client software recontacts the
# Eureka service for any changes to the registry.
eureka.client.fetchRegistry=true
# Sets the location of the Eureka service
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${eureka.server.port}/eureka/