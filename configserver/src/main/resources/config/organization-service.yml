# https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.property-placeholders
# Property placeholders are replaced in Docker Compose file with the env variables

server:
  port: 8081

example:
  property: I AM THE DEFAULT

logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.optimagrowth: DEBUG

management:
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: '*'

spring:
  database:
    driverClassName: org.postgresql.Driver
  datasource:
    platform: postgres
    testWhileIdle: true
    validationQuery: SELECT 1
  jpa:
    database: POSTGRESQL
    hibernate:
      ddl-auto: none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
  # Once we set up the organization service as a Resource Server ( protected resource, according to OAuth 2.0),
  # every time a call is made to the service, the caller must include the authentication HTTP header
  # containing a Bearer access token to the service.
  # Our Resource Server then has to call back to the Keycloak server as an Authorization Server
  # to see if the token is valid.
  #
  # For Keycloak Authorization Server details, see:
  # http://keycloak:8080/auth/realms/spmia-realm/.well-known/openid-configuration
  #
  # For Spring Boot 3 Resource Server + Keycloak OAuth 2.0 Authorization Server configs, see:
  # https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html
  # https://medium.com/@rickors560/securing-spring-boot-3-1-0-applications-with-spring-security-and-keycloak-21-e694c6f5617d
  #
  # To get access JWT for predefined user, we have to execute following HTTP call
  # from within our container's network, since "iss" (i.e. issuer) attribute in JWT should be the same
  # as called Keycloak Authorization Server URI (see below: security.oauth2.resourceserver.jwt.issuer-uri).
  # See: https://stackoverflow.com/questions/72854439/iss-claim-not-valid-keycloak
  #
  # N.B.
  # Follow the steps below:
  # 1. Enter organization-service container:
  # docker exec -it docker-organizationservice-1 /bin/sh
  # 2. There, install curl tool:
  # apt-get update; apt-get install -y curl
  # 3. After that, execute the following curl call:
  # curl --location 'http://keycloak:8080/realms/MyAppRealm/protocol/openid-connect/token' \
  # --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'username=user.admin' \
  # --data-urlencode 'password=1234567890' --data-urlencode 'grant_type=password' --data-urlencode \
  # 'client_id=Ostock' --data-urlencode 'client_secret=**********' --data-urlencode 'scope=openid'
  #
  # You can regenerate client_secret from within the Keycloak UI admin panel:
  # http://localhost:8080/ -> Clients -> Ostock -> Credentials -> Client secret -> Regenerate
  # After that, replace above curl call's 'client_secret' attribute with the new value.
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/MyAppRealm}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8080/realms/MyAppRealm/protocol/openid-connect/certs}
  # See:
  # https://www.youtube.com/watch?app=desktop&v=vo6RBevVugE
  # https://github.com/himanshuntwk/spring-projects/blob/main/kafka-binder-demo/src/main/resources/application.yml
  # https://spring.io/guides/gs/spring-cloud-stream/
  cloud:
    stream:
      bindings:
        producerBinding-out-0:
          destination: organization-topic # Kafka topic name to write to
      kafka:
        binder:
          brokers:
            - kafkaserver:9092

eureka:
  server:
    port: 8070
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME:localhost}
    # Registers the IP address of the service rather than the server name.
    # By default, Eureka registers the services that contact it by hostname (DNS).
    # This works well in a server-based environment, where a service is assigned a DNS-backed hostname.
    # However, in a container-based deployment (for example, Docker), containers are
    # started with randomly generated hostnames and no DNS entries for the containers.
    preferIpAddress: true
  client:
    # Pulls down a local copy of the registry
    # Setting this attribute to true caches the registry locally instead of calling the
    # Eureka service with each lookup. Every 30 seconds, the client software recontacts the
    # Eureka service for any changes to the registry.
    fetchRegistry: true
    # Registers the service with Eureka
    registerWithEureka: true
    serviceUrl:
      # Sets the location of the Eureka service
      defaultZone: http://${eureka.instance.hostname}:${eureka.server.port}/eureka/
