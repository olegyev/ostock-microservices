# https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.property-placeholders
# Property placeholders are replaced in Docker Compose file with the env variables

server:
  port: 8080

example:
  property: I AM THE DEFAULT

logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.optimagrowth: DEBUG

management:
  endpoint:
    health:
      show-details: "ALWAYS"
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: '*'
  # https://stackoverflow.com/a/77062620
  health:
    circuitbreakers:
      enabled: true

spring:
  database:
    driverClassName: org.postgresql.Driver
  datasource:
    platform: postgres
    testWhileIdle: true
    validationQuery: SELECT 1
  jpa:
    database: POSTGRESQL
    hibernate:
      ddl-auto: none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true

eureka:
  server:
    port: 8070
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME:localhost}
    # Registers the IP address of the service rather than the server name.
    # By default, Eureka registers the services that contact it by hostname (DNS).
    # This works well in a server-based environment, where a service is assigned a DNS-backed hostname.
    # However, in a container-based deployment (for example, Docker), containers are
    # started with randomly generated hostnames and no DNS entries for the containers.
    preferIpAddress: true
  client:
    # Pulls down a local copy of the registry
    # Setting this attribute to true caches the registry locally instead of calling the
    # Eureka service with each lookup. Every 30 seconds, the client software recontacts the
    # Eureka service for any changes to the registry.
    fetchRegistry: true
    # Registers the service with Eureka
    registerWithEureka: true
    serviceUrl:
      # Sets the location of the Eureka service
      defaultZone: http://${eureka.instance.hostname}:${eureka.server.port}/eureka/

# https://resilience4j.readme.io/docs/circuitbreaker#create-and-configure-a-circuitbreaker
resilience4j.circuitbreaker:
  configs:
    default:
      # Indicates whether to expose the configuration over the /actuator/health endpoint
      registerHealthIndicator: true
  instances:
    # Licensing service instance configuration. (The name given to the circuit breaker in the annotation.)
    licenseService:
      # Records the outcome of calls when the CircuitBreaker is CLOSED.
      # COUNT_BASED = the last slidingWindowSize calls are recorded and aggregated
      # TIME_BASED = the calls of the last slidingWindowSize seconds recorded and aggregated
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5 # default = 100
      # After this number of calls CircuitBreaker can calculate the error rate or slow call rate
      minimumNumberOfCalls: 3 # default = 100
      permittedNumberOfCallsInHalfOpenState: 3 # default = 10
      # Sets the time the circuit breaker should wait before changing the status from open to half-open.
      waitDurationInOpenState: 10s # default = 60,000 ms
      # In % = failed calls to succeeded calls. If >= then OPEN
      failureRateThreshold: 10 # default = 50
      slowCallRateThreshold: 10 # default = 100
      # If >= then call is considered as slow
      slowCallDurationThreshold: 2s # default = 60,000 ms
      # Sets the exceptions that should be recorded as failures
      recordExceptions: # default = all exceptions
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException
