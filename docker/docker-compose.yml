version: '3.8'

services:
  database:
    image: postgres:16rc1-bullseye
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./sql/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - "database"

  configserver:
    image: ostock/configserver:0.0.1-SNAPSHOT
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: "IAMSYMMETRIC"
    networks:
      backend:
        aliases:
          - "configserver"

  eurekaserver:
    image: ostock/eureka:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"

  gatewayserver:
    image: ostock/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gatewayserver"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.4
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json
    restart: always
    networks:
      backend:
        aliases:
          - "keycloak"

  # https://www.baeldung.com/ops/kafka-docker-setup
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      backend:
        aliases:
          - "zookeeper"

  # https://www.baeldung.com/ops/kafka-docker-setup
  kafkaserver:
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "29092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkaserver:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      backend:
        aliases:
          - "kafkaserver"

  # Creates 2 Kafka topics (dresses, ratings) when Kafka server is launched
  # See: https://stackoverflow.com/a/69534299
  # To check topics, run:
  #   docker exec -it docker-kafkaserver-1 /bin/sh
  #   kafka-topics --bootstrap-server kafkaserver:9092 --list
  kafkaserverinit:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      kafkaserver:
        condition: service_started
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafkaserver:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafkaserver:9092 --create --if-not-exists --topic dresses --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafkaserver:9092 --create --if-not-exists --topic ratings --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafkaserver:9092 --list
      "
    networks:
      backend:
        aliases:
          - "kafkaserverinit"

  organizationservice:
    image: ostock/organization-service:0.0.1-SNAPSHOT
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5432/ostock_dev"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver"
      KEYCLOAK_ISSUER_URI: "http://keycloak:8080/realms/MyAppRealm"
      KEYCLOAK_JWK_SET_URI: "http://keycloak:8080/realms/MyAppRealm/protocol/openid-connect/certs"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "organizationservice"

  licensingservice:
    image: ostock/licensing-service:0.0.1-SNAPSHOT
    ports:
      - "8180:8180"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5432/ostock_dev"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver"
      KEYCLOAK_ISSUER_URI: "http://keycloak:8080/realms/MyAppRealm"
      KEYCLOAK_JWK_SET_URI: "http://keycloak:8080/realms/MyAppRealm/protocol/openid-connect/certs"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "licensingservice"

networks:
  backend:
    driver: bridge